//Win + . proto≈æe jsem ?????? a zapom√≠n√°m na zkratku pro ikonky :) 
// Hlavn√≠ soubor pro hru Clicker Heroes

// üß± Z√°kladn√≠ objekty hrdiny a nep≈ô√≠tele
class Hero {
  constructor(name, damage) {
    this.name = name;
    this.damage = damage;
    this.gold = 0;
    this.dps = 0; // Damage per second
  }

  // √ötok na nep≈ô√≠tele
  attack(enemy) {
    enemy.hp -= this.damage;
    if (enemy.hp <= 0) {
      enemy.hp = 0;
      this.gold += enemy.goldReward;
      console.log(`${enemy.name} pora≈æen! Z√≠sk√°no zlato: ${this.gold}`);
      enemy.respawn();
    }
  }

  // Automatick√Ω DPS √∫tok
  applyDPS(enemy) {
    if (enemy.hp > 0) {
      enemy.hp -= this.dps;
      if (enemy.hp <= 0) {
        enemy.hp = 0;
        this.gold += enemy.goldReward;
        console.log(`${enemy.name} pora≈æen! Z√≠sk√°no zlato: ${this.gold}`);
        enemy.respawn();
      }
    }
  }
}

class Enemy {
  constructor(name, hp, goldReward) {
    this.name = name;
    this.hp = hp;
    this.maxHp = hp;
    this.goldReward = goldReward;
    this.level = 1;
  }

  // Znovuzrozen√≠ nep≈ô√≠tele s vy≈°≈°√≠ √∫rovn√≠
  respawn() {
    this.level++;
    this.maxHp = Math.floor(this.maxHp * 1.5);
    this.hp = this.maxHp;
    this.goldReward = Math.floor(this.goldReward * 1.5);
    console.log(`${this.name} je zpƒõt na √∫rovni ${this.level} s ${this.hp} HP!`);
  }
}

// üéÆ Vytvo≈ôen√≠ hrdiny a nep≈ô√≠tele
const hero = new Hero('Warrior', 10);
const enemy = new Enemy('Goblin', 50, 20);

// üñºÔ∏è Naƒçten√≠ obr√°zku slizu
const slimeImage = new Image();
slimeImage.src = './res/img/sorcerer.png'; // Cesta k obr√°zku

// üñ±Ô∏è Zpracov√°n√≠ kliknut√≠ na canvas
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// Zabr√°nƒõn√≠ oznaƒçov√°n√≠ textu na canvasu 
canvas.style.userSelect = 'none';
canvas.style.webkitUserSelect = 'none';
canvas.style.msUserSelect = 'none';
canvas.style.mozUserSelect = 'none';



canvas.addEventListener('click', (event) => {
  const rect = canvas.getBoundingClientRect();
  const x = event.clientX - rect.left;
  const y = event.clientY - rect.top;

  // Kontrola kliknut√≠ na ƒçerven√Ω ƒçtverec (nep≈ô√≠tel)
  if (x >= 350 && x <= 550 && y >= 150 && y <= 350) {
    if (enemy.hp > 0) {
      hero.attack(enemy);
      updateGameInfo();
    }
  }

  
});

// üîÑ Funkce pro aktualizaci hern√≠ch informac√≠
function updateGameInfo() {
  document.getElementById('heroInfo').innerText = `Hrdina: ${hero.name}, Zlato: ${hero.gold}, DPS: ${hero.dps}, Damage: ${hero.damage}`;
  document.getElementById('enemyInfo').innerText = `Nep≈ô√≠tel: ${enemy.name}, √örove≈à: ${enemy.level}, HP: ${enemy.hp}/${enemy.maxHp}`;
}

// üé® Hlavn√≠ smyƒçka pro vykreslov√°n√≠ hry
function gameLoop() {
  draw();
  hero.applyDPS(enemy); // DPS √∫tok
  updateGameInfo();
  requestAnimationFrame(gameLoop);
}

// üñåÔ∏è Kreslen√≠ na canvas
function draw() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  // Kreslen√≠ nep≈ô√≠tele (vpravo)
  if (slimeImage.complete) {
    ctx.drawImage(slimeImage, 350, 150, 200, 200); // Obr√°zek slizu
  } else {
    ctx.fillStyle = 'red';
    ctx.fillRect(350, 150, 200, 200); // Rezervn√≠ ƒçtverec, dokud se obr√°zek nenaƒçte
  }

  // Kreslen√≠ health baru pod nep≈ô√≠telem
  const healthBarWidth = 300 * (enemy.hp / enemy.maxHp);
  ctx.lineWidth = 2;
  ctx.strokeStyle = 'black';
  ctx.fillStyle = 'gray';
  ctx.beginPath();
  ctx.roundRect(300, 360, 300, 30, 10); // R√°meƒçek
  ctx.stroke();
  ctx.fill();
  ctx.fillStyle = 'green';
  ctx.beginPath();
  ctx.roundRect(300, 360, healthBarWidth, 30, 10); // Zdrav√≠
  ctx.fill();

  
}

// üèãÔ∏è Kreslen√≠ hrdin≈Ø na lev√©m panelu
const heroPanel = document.getElementById('heroPanel');

const heroImage = new Image();
heroImage.src = './res/img/smrt.png';


// Seznam hrdin≈Ø/upgrad≈Ø
const upgrades = [
  { name: "Slime", cost: 100, dps:35,  image: "./res/img/slime.png", isClickMultiplier: true },
  { name: "Smrtka", cost: 500, dps: 15, image: "./res/img/smrt.png" },
  { name: "Kouzeln√≠k", cost: 1000, dps: 100, image: "./res/img/sorcerer.png" },
  { name: "Zeus", cost: 10000, dps: 1000, image: "./res/img/zeus.png" },
  { name: "Poseidon", cost: 100000, dps: 10000, image: "./res/img/poseidon.png" },
  { name: "Hades", cost: 1000000, dps: 100000, image: "./res/img/hades.png" },
  
];

// Generov√°n√≠ ≈ô√°dk≈Ø
heroPanel.innerHTML = ""; // Vyma≈æeme obsah panelu, pokud je pot≈ôeba

upgrades.forEach((upgrade, index) => {
  const heroRow = document.createElement("div");
  heroRow.className = "hero-row";

  const heroImage = document.createElement("img");
  heroImage.src = upgrade.image;
  heroImage.style.width = "120px";
  heroImage.style.height = "120px";
  heroImage.style.marginRight = "10px";

  const heroButton = document.createElement("button");
  heroButton.textContent = `Najmout (-${upgrade.cost} zlata)`;
  heroButton.style.marginRight = "10px";

  // Logika n√°kupu
  heroButton.addEventListener("click", () => {
    if (hero.gold >= upgrade.cost) {
      hero.gold -= upgrade.cost;
      if (upgrade.isClickMultiplier) {
        hero.damage += 35; // Zv√Ω≈°en√≠ damage za kliknut√≠
      } else {
        hero.dps += upgrade.dps;
      }
      upgrade.cost = Math.floor(upgrade.cost * 1.5); // Zv√Ω≈°en√≠ ceny
      heroButton.textContent = `Najmout (-${upgrade.cost} zlata)`; // Aktualizace tlaƒç√≠tka
      updateGameInfo();
      console.log(`${upgrade.name} najat! `);
    } else {
      console.log("Nedostatek zlata!");
    }
  });

  heroRow.appendChild(heroImage);
  heroRow.appendChild(heroButton);
  heroRow.appendChild(document.createTextNode(`${upgrade.name} (Damage: ${upgrade.dps || "Boost Kliknut√≠"})`));
  heroPanel.appendChild(heroRow);
});

// Spu≈°tƒõn√≠ hry
updateGameInfo();
gameLoop();


  
 
  